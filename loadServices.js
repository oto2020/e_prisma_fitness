const { PrismaClient } = require('@prisma/client');
const xlsx = require('xlsx');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const prisma = new PrismaClient();
let isProcessing = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤

async function loadServicesData(filePath) {
  const workbook = xlsx.readFile(filePath);
  const sheetName = workbook.SheetNames[0];
  const worksheet = workbook.Sheets[sheetName];
  let jsonData = xlsx.utils.sheet_to_json(worksheet);

  jsonData = jsonData.slice(1, -1); // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É

  const servicesData = jsonData.map(row => ({
    id: String(row.id),
    name: row.name,
    division: row.division,
    trainer: row.trainer,
    client: row.client,
    basis: row.basis || null,
    comment: row.comment,
    datetime: new Date(row.datetime),
    price: Number(row.price)
  }));

  console.log(`üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${servicesData.length} –∑–∞–ø–∏—Å–µ–π.`);

  try {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await prisma.service.deleteMany({});
    console.log("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.");

    const batchSize = 500;
    for (let i = 0; i < servicesData.length; i += batchSize) {
      const batch = servicesData.slice(i, i + batchSize);
      console.log(`üì§ –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π: ${i + 1}-${i + batch.length} / ${servicesData.length}`);

      await prisma.service.createMany({
        data: batch,
        skipDuplicates: true
      });
    }

    console.log(`‚úÖ –§–∞–π–ª ${filePath} –∑–∞–≥—Ä—É–∂–µ–Ω.`);

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    fs.unlink(filePath, (err) => {
      if (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, err);
      } else {
        console.log(`üóëÔ∏è –§–∞–π–ª ${filePath} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
      }
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
  }
}

async function processServiceFiles() {
  if (isProcessing) {
    console.log("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...");
    return;
  }

  isProcessing = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏

  try {
    const directoryPath = path.join(__dirname, "..", process.env.FTP_FOLDER);
    const files = await fs.promises.readdir(directoryPath);
    
    const excelFiles = files.filter(file => file.startsWith('ftp.services') && file.endsWith('.xlsx'));

    if (excelFiles.length === 0) {
      console.log("üìÇ –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${excelFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);

    for (const file of excelFiles) {
      await loadServicesData(path.join(directoryPath, file));
    }

    console.log('üéâ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:", error);
  } finally {
    isProcessing = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  }
}

// üîπ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
(async () => {
  console.log("üöÄ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤...");
  await processServiceFiles();
})();

// üîπ –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(processServiceFiles, 60 * 1000);

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log("\nüõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...");
  await prisma.$disconnect();
  process.exit();
});
