const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// üîπ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const targetServiceYear = 2024;  // –ì–æ–¥
const targetServiceMonths = [10, 11, 12];  // –ù–æ–º–µ—Ä–∞ –º–µ—Å—è—Ü–µ–≤
const targetServiceName = '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–º –∑–∞–ª–µ';
const saleDivisions = ['–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª'];
const conversationDays = 60; // –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏

async function fetchData() {
    try {
        // üîπ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const monthsList = targetServiceMonths.map(m => `'${m}'`).join(',');
        const divisionsList = saleDivisions.map(d => `'${d}'`).join(',');

        // üîπ –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const query = `
            WITH FilteredServices AS (
                SELECT 
                    trainer,
                    client,
                    MONTH(datetime) AS month,
                    datetime AS service_date,
                    COUNT(*) AS conducted_trainings
                FROM services
                WHERE YEAR(datetime) = ?
                  AND MONTH(datetime) IN (${monthsList})
                  AND name = ?
                GROUP BY trainer, client, month, service_date
            ),
            FirstSales AS (
                SELECT 
                    sale.trainer,
                    sale.client,
                    MONTH(sale.datetime) AS month,
                    MIN(sale.datetime) AS first_sale_date,
                    SUM(sale.final_price) AS sales_amount
                FROM sales sale
                JOIN FilteredServices fs ON sale.client = fs.client 
                                         AND sale.trainer = fs.trainer 
                                         AND sale.division IN (${divisionsList})
                                         AND sale.datetime BETWEEN fs.service_date AND DATE_ADD(fs.service_date, INTERVAL ${conversationDays} DAY)
                GROUP BY sale.trainer, sale.client, month
            )
            SELECT 
                fs.trainer,
                ${targetServiceMonths.map(m => `                
                SUM(CASE WHEN fs.month = ${m} THEN fs.conducted_trainings ELSE 0 END) AS '–ø—Ä–æ–≤–µ–¥–µ–Ω–æ_${m}',
                COUNT(CASE WHEN fs.month = ${m} AND fs.client IN (SELECT client FROM FirstSales WHERE month = ${m}) THEN 1 END) AS '–ø—Ä–æ–¥–∞–∂_${m}',
                FORMAT(SUM(CASE WHEN fs.month = ${m} THEN 
                    (SELECT sales_amount FROM FirstSales WHERE FirstSales.trainer = fs.trainer AND FirstSales.client = fs.client AND FirstSales.month = ${m}) 
                    ELSE 0 END), 0, 'ru_RU') AS '—Å—É–º–º–∞_${m}'
                `).join(',')}
            FROM FilteredServices fs
            GROUP BY fs.trainer
            ORDER BY fs.trainer;
        `;

        // üîπ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Prisma ORM
        const result = await prisma.$queryRawUnsafe(query, targetServiceYear, targetServiceName);

        // üîπ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        let header = "–¢—Ä–µ–Ω–µ—Ä\t" + targetServiceMonths.map(m => 
            `–ü—Ä–æ–≤–µ–¥–µ–Ω–æ ${targetServiceYear}-${m}\t–ü—Ä–æ–¥–∞–∂ ${targetServiceYear}-${m}\t–°—É–º–º–∞ ${targetServiceYear}-${m}`
        ).join('\t');
        console.log(header);

        // üîπ –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        result.forEach(row => {
            let rowData = `${row.trainer}\t`;
            rowData += targetServiceMonths.map(m => 
                `${row[`–ø—Ä–æ–≤–µ–¥–µ–Ω–æ_${m}`] || 0}\t${row[`–ø—Ä–æ–¥–∞–∂_${m}`] || 0}\t${row[`—Å—É–º–º–∞_${m}`] || '0 ‚ÇΩ'}`
            ).join('\t');
            console.log(rowData);
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// üîπ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
fetchData();
