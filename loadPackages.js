const { PrismaClient } = require('@prisma/client');
const xlsx = require('xlsx');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const prisma = new PrismaClient();
let isProcessing = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏

async function loadPackagesData(filePath) {
  const workbook = xlsx.readFile(filePath);
  const sheetName = workbook.SheetNames[0];
  const worksheet = workbook.Sheets[sheetName];
  const jsonData = xlsx.utils.sheet_to_json(worksheet, { range: 2 }); // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏

  console.log(jsonData);
  
//   console.log(jsonData);
//   return;

  // –ú–∞–ø–∏–º –¥–∞–Ω–Ω—ã–µ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ Package
  const packagesData = jsonData.map(row => ({
    id: String(row.id),
    dateSale: row.dateSale ? new Date(row.dateSale) : null,
    dateActivation: row.dateActivation ? new Date(row.dateActivation) : null,
    dateClosing: row.dateClosing ? new Date(row.dateClosing) : null,
    name: row.name,
    division: row.division,
    comment: row.comment,
    client: row.client,
    clientBirthday: row.clientBirthday ? new Date(row.clientBirthday) : null,
    clientPhone: row.clientPhone,
    trainer: row.trainer,
    price: row.price ? Number(row.price) : null,
    count: row.count ? parseInt(row.count): null,
    dateProdl: row.dateProdl ? new Date(row.dateProdl) : null,
    status: row.status
  }));

  console.log(`üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${packagesData.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ packages.`);

  try {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –Ω–æ–≤—ã—Ö
    await prisma.package.deleteMany({});
    console.log("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ 'packages' —É–¥–∞–ª–µ–Ω—ã.");

    // –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≤—Å—Ç–∞–≤–∫—É
    const batchSize = 500;
    for (let i = 0; i < packagesData.length; i += batchSize) {
      const batch = packagesData.slice(i, i + batchSize);
      console.log(`üì§ –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π: ${i + 1}-${i + batch.length} / ${packagesData.length}`);

      // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏
      await prisma.package.createMany({
        data: batch,
        skipDuplicates: true,
      });
    }

    console.log(`‚úÖ –§–∞–π–ª ${filePath} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ 'packages'!`);

    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlink(filePath, (err) => {
      if (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, err);
      } else {
        console.log(`üóëÔ∏è –§–∞–π–ª ${filePath} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
      }
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ 'packages':", error);
  }
}

async function processPackageFiles() {
  if (isProcessing) {
    console.log("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...");
    return;
  }

  isProcessing = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏

  try {
    const directoryPath = path.join(__dirname, "..", process.env.FTP_FOLDER);
    const files = await fs.promises.readdir(directoryPath);
    
    // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å "ftp.packages" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const excelFiles = files.filter(file => file.startsWith('ftp.packages') && file.endsWith('.xlsx'));

    if (excelFiles.length === 0) {
      console.log("üìÇ –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (packages).");
      return;
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${excelFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (packages).`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const file of excelFiles) {
      await loadPackagesData(path.join(directoryPath, file));
    }

    console.log('üéâ –í—Å–µ —Ñ–∞–π–ª—ã (packages) –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤ (packages):", error);
  } finally {
    isProcessing = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
(async () => {
  console.log("üöÄ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ (packages)...");
  await processPackageFiles();
})();

// –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(processPackageFiles, 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log("\nüõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...");
  await prisma.$disconnect();
  process.exit();
});
