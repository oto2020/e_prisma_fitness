const { PrismaClient } = require('@prisma/client');
const xlsx = require('xlsx');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function loadSalesData(filePath) {
  const workbook = xlsx.readFile(filePath);
  const sheetName = workbook.SheetNames[0];
  const worksheet = workbook.Sheets[sheetName];
  let jsonData = xlsx.utils.sheet_to_json(worksheet);

  jsonData = jsonData.slice(1, -1); // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É

  const salesData = jsonData.map(row => ({
    id: String(row.id),
    datetime: new Date(row.datetime),
    division: row.division,
    name: row.name,
    client: row.client,
    author: row.author,
    trainer: row.trainer,
    type: row.type,
    order_count: Number(row.order_count),
    order_price: row.order_price ? Number(row.order_price) : null,
    refund_count: row.refund_count ? Number(row.refund_count) : null,
    refund_price: row.refund_price ? Number(row.refund_price) : null,
    final_price: row.final_price ? Number(row.final_price) : null
  }));

  console.log(`–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${salesData.length} –∑–∞–ø–∏—Å–µ–π.`);

  try {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    await prisma.sale.deleteMany({});
    console.log("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.");

    const batchSize = 500; // –í—Å—Ç–∞–≤–∫–∞ –±–∞—Ç—á–∞–º–∏ –ø–æ 500 –∑–∞–ø–∏—Å–µ–π
    for (let i = 0; i < salesData.length; i += batchSize) {
      const batch = salesData.slice(i, i + batchSize);
      console.log(`üì§ –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π: ${i + 1}-${i + batch.length} / ${salesData.length}`);

      await prisma.sale.createMany({
        data: batch,
        skipDuplicates: true
      });
    }

    console.log(`‚úÖ –§–∞–π–ª ${filePath} –∑–∞–≥—Ä—É–∂–µ–Ω.`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
  }
}

async function main() {
  const directoryPath = path.join(__dirname, "..", "ftp");

  fs.readdir(directoryPath, async (err, files) => {
    if (err) {
      return console.log('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ' + err);
    }

    const excelFiles = files.filter(file => file.startsWith('ftp.sales') && file.endsWith('.xlsx'));

    if (excelFiles.length === 0) {
      console.log("‚ùå –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
      return;
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${excelFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);

    for (const file of excelFiles) {
      await loadSalesData(path.join(directoryPath, file));
    }

    console.log('üéâ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
  });
}

main()
  .catch(e => console.error(e))
  .finally(async () => {
    await prisma.$disconnect();
  });
