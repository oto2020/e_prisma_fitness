const { PrismaClient } = require('@prisma/client');
const xlsx = require('xlsx');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();
let isProcessing = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è

async function loadSalesData(filePath) {
  const workbook = xlsx.readFile(filePath);
  const sheetName = workbook.SheetNames[0];
  const worksheet = workbook.Sheets[sheetName];
  let jsonData = xlsx.utils.sheet_to_json(worksheet);

  jsonData = jsonData.slice(1, -1); // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É

  const salesData = jsonData.map(row => ({
    id: String(row.id),
    datetime: new Date(row.datetime),
    division: row.division,
    name: row.name,
    client: row.client,
    author: row.author,
    trainer: row.trainer,
    type: row.type,
    order_count: Number(row.order_count),
    order_price: row.order_price ? Number(row.order_price) : null,
    refund_count: row.refund_count ? Number(row.refund_count) : null,
    refund_price: row.refund_price ? Number(row.refund_price) : null,
    final_price: row.final_price ? Number(row.final_price) : null
  }));

  console.log(`üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${salesData.length} –∑–∞–ø–∏—Å–µ–π.`);

  try {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    await prisma.sale.deleteMany({});
    console.log("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.");

    const batchSize = 500; // –í—Å—Ç–∞–≤–∫–∞ –±–∞—Ç—á–∞–º–∏ –ø–æ 500 –∑–∞–ø–∏—Å–µ–π
    for (let i = 0; i < salesData.length; i += batchSize) {
      const batch = salesData.slice(i, i + batchSize);
      console.log(`üì§ –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π: ${i + 1}-${i + batch.length} / ${salesData.length}`);

      await prisma.sale.createMany({
        data: batch,
        skipDuplicates: true
      });
    }

    console.log(`‚úÖ –§–∞–π–ª ${filePath} –∑–∞–≥—Ä—É–∂–µ–Ω.`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
  }
}

async function processFiles() {
  if (isProcessing) {
    console.log("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...");
    return;
  }

  isProcessing = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏

  try {
    const directoryPath = path.join(__dirname, "..", "ftp");

    fs.readdir(directoryPath, async (err, files) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', err);
        isProcessing = false;
        return;
      }

      const excelFiles = files.filter(file => file.startsWith('ftp.sales') && file.endsWith('.xlsx'));

      if (excelFiles.length === 0) {
        console.log("üìÇ –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        isProcessing = false;
        return;
      }

      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${excelFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);

      for (const file of excelFiles) {
        await loadSalesData(path.join(directoryPath, file));
      }

      console.log('üéâ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
      isProcessing = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:", error);
    isProcessing = false;
  }
}

// üîπ –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (1800000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
setInterval(processFiles, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç

// üîπ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
processFiles().catch(console.error);

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log("\nüõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...");
  await prisma.$disconnect();
  process.exit();
});
